name: Veracode Static Analysis Pipeline Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 10 * * 5'  # Toda sexta-feira às 07:00 BRT

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  build_and_pipeline_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      issues: write

    steps:
      - uses: actions/checkout@v4

      - run: zip -r veracode-scan-target.zip ./

      - run: curl --silent --show-error --fail -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - run: unzip -o pipeline-scan-LATEST.zip

      - uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Run Veracode Pipeline Scan
        run: java -jar pipeline-scan.jar \
              --veracode_api_id "${{ secrets.VERACODE_API_ID }}" \
              --veracode_api_key "${{ secrets.VERACODE_API_KEY }}" \
              --fail_on_severity="High,Critical" \
              --json_output true \
              --file veracode-scan-target.zip
        continue-on-error: true

      - name: Convert scan results to SARIF
        id: convert
        uses: veracode/veracode-pipeline-scan-results-to-sarif@ff08ae5b45d5384cb4679932f184c013d34da9be
        with:
          pipeline-results-json: results.json
          output-sarif: veracode-results.sarif

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: veracode-results.sarif

      - name: Veracode Fix
        uses: veracode/veracode-fix@v1.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          input-file: results.json

      - name: Create issues from results.json
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'results.json';
            if (!fs.existsSync(path)) {
              console.log('Arquivo results.json não encontrado.');
              return;
            }
            const data = fs.readFileSync(path, 'utf8');
            const results = JSON.parse(data);
            if (!results.findings || results.findings.length === 0) {
              console.log("Nenhuma vulnerabilidade encontrada.");
              return;
            }
            for (const finding of results.findings.slice(0,5)) {
              const file = finding.file || 'Arquivo não especificado';
              const severity = finding.severity || 'Gravidade não informada';
              const cwe = finding.cwe?.name || 'CWE desconhecido';
              const description = finding.description || 'Sem descrição disponível.';
              const recommendation = finding.recommendation || 'Sem recomendação.';
              const issueTitle = `[${severity}] Vulnerabilidade detectada em ${file}`;
              const issueBody = `
**Arquivo:** ${file}
**Gravidade:** ${severity}
**Descrição:** ${description}
**CWE:** ${cwe}
**Recomendação:** ${recommendation}

_Gerado automaticamente pelo Veracode Fix + GitHub Actions_`;
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
              });
            }
